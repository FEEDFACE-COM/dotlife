#!/usr/bin/env python3


import sys, os, re, pprint
import datetime, time
import logging, getopt
import signal

from bdb import BdbQuit

import dotlife
from dotlife import *
from dotlife.util import *
from dotlife.about import NAME, VERSION

from dotlife.time import Clock, FRAME, NOW


import oledlife
from oledlife import MODE

from oledlife import Buffer, FRAMESIZE
from oledlife.mode import Mode
from oledlife.paneloled import Paneloled


DEFAULT_MODE = MODE.fyi
DEFAULT_DEVICE = "/dev/ttyUSB1"

## MAIN ########################################################################





def main(runmode, device, nowrite, forever,preview, framerate, speed, **params):

    info("oledlife start at {:.2f}fps".format(framerate))

    # register signals
    signal.signal(signal.SIGQUIT, quit)
    
    Clock.Init()
    try:
        paneloled = Paneloled(device,nowrite)
    except Error as x:
        FATAL("fail open paneloled dmx: "+str(x))

    timer = Clock.Timer(1000.*speed,repeat=0)
    buffer = Buffer()
    
            
    try:
        mode = runmode.value(timer,buffer,**params)
    except Error as x:
        FATAL("fail init mode {:s}: {:s}".format(str(runmode),str(x)))

    
    
    
    
    try:

        run = mode.start(**params)

        buf = mode.draw(**params)
        paneloled.send(buf)

        if preview:
            printBuffer(str(buf))
        

        prev = ( FRAME(), NOW() )
        while run and forever:
        
            try:
                Clock.Sleep( 1./framerate )
                Clock.Tick()
                
                if framerate < 1. or Clock.frame % int(framerate) == 0:
                    info("{:s} {:s} {:.1f}fps".format(Clock.Str(),str(mode),Clock.fps(prev)))
                    prev = ( FRAME(), NOW() )
                    
            
                buf = mode.draw(**params)
                paneloled.send(buf)
                
                if preview:
                    printBuffer(str(buf))

            except KeyboardInterrupt as x:
                if is_debug():
                    info("toggle pause.") 
                    Clock.Pause()
                else:
                    raise x



    except KeyboardInterrupt as x:
        info("user interrupt.") 
        
    except Error as x:
        FATAL("error: {:s}".format( str(x) ))
    
    except SystemExit as x:
        info("exit.")
   
#    except Exception as x:
#        FATAL("unexpected: " + repr(x) )
    
    
    
    return 0
    
#        
#    prev = ( FRAME(), NOW() )
#    pointbreak= False
#    while True:
#        try:
#            Clock.Tick()
#            framebuffer = Framebuffer()
#
#            buffer = mode.draw()
#
#            if blend == dotlife.Blend.jump:
#                pass
#            elif blend == dotlife.Blend.Black:
#                buffer.mul( mode.timer.sin0(1.) )
#            elif blend == dotlife.Blend.Frame:
#                buffer.mul(16. * (mode.timer.ease(freq=4.)))
#                tmp = Buffer()
#                tmp.add( mode.last )
#                tmp.mul(16. * (1. - mode.timer.ease(freq=4.)))
#                buffer.add( tmp )
#        
#            
#            if gain != 0x00:
#                buffer.mul( gain )
#        
#            framebuffer.add( buffer )
#
#            if dmx:
#                send(dmx,framebuffer)
#
#            if FRAME() % 60 == 0:
#                if FRAME() % 600 == 0:
#                    debug("{:s} {:.1f}fps {:s}".format(Clock.Str(),fps(prev),str(mode)))
#                prev = ( FRAME(), NOW() )
#
#            if preview:
#                Y = FRAMESIZE.h+1
#
#
#


## UTILITY #####################################################################





def quit(sig,frame):
    log("exit.")   
    sys.exit(0)




def printBuffer(buf):
    Y = FRAMESIZE.h+1
    columns,lines = os.get_terminal_size()
    up   = "\u001b[{:d}A".format( FRAMESIZE.w + 1 + Y )
    down   = "\u001b[1E"
    right = "\u001b[{:d}C".format(columns - ((FRAMESIZE.w+2) * 2 ))
    buf = str(buf).split("\n")
    sys.stdout.write(up)
    for i in range(Y):
        sys.stdout.write( right + 20*" " + down)
    for s in buf:
        sys.stdout.write(right + s + down)
    sys.stdout.write( right + 20*" " + down)
    sys.stdout.flush()

    








## FLAGS ######################################################################
    

HELPFLAGS = [
        ("h",  "help",         None,                None,    "display help",           None ),
]

FLAGS = [
    # short long param default help func #             
    ("h",  "help",         None,                None,    "display help",           None ),
    ("S:", "serial=",      "device",  DEFAULT_DEVICE,    "paneloled serial device",                                              None ),
    ("W",  "nowrite",      "nowrite",          False,    "no writes to paneloled?", None ),
    ("C",  "clear",        "clear",             True,    "clear paneloled?",        None ),
    ("F",  "forever",      "forever",          True,     "run continuously?",      None ),
    ("P",  "preview",      "preview",          False,    "buffer preview on stdout?",      None ),
    ("f:", "framerate=",   "framerate",          60.,    "paneloled update interval (fps)",      lambda x: float(x) ),
    ("v",  "",      None,                None,    "increase verbosity",     None ),
    ("V",  "",      None,                None,    "display version",        None ),
]
    



def usage(mode=None,msg=""):

    from dotlife.util import usage as log
    
    
    if msg != "":
        log("##")
        log("## Usage Error: " + msg)
        log("##")
        log("")
    
    if mode == None:
    
        log("## Usage")
        log("")
        log("  {} [-{}]{} <MODE> [-h] ...".format(
            "oledlife",
            "".join([s[0] if s else "" for (s,_,_,_,_,_) in FLAGS]),
            "".join(["[--{:s}] ".format(l) if not s and l else "" for (s,l,_,_,_,_) in FLAGS]),
            )
        )
        log("")
        
        log("## Flags")
        for (s,l,p,d,h,_) in FLAGS:
            if not p:
                continue
            log("  {:3} {:20}    {}{}".format( "-"+s.rstrip(":")+"," if s else "","--"+l if l else "",h,("" if d in [None,False] else ", default: "+str(d).lower()) ))
        log("")

        log("## Modes")
        modes = "  "
        for k in MODE:
#            log("  {:16s}{:s}".format(k.name,k.value.help))
            modes += k.name + ", "
            if len(modes) > 40:
                log(modes)
                modes = "  "
        if len(modes)>0:
            log(modes[:-2])
        log("")
    
    else:
        flags = Mode.FLAGS + mode.value.flags
        log("## Usage")
        log("")

        log("  {:s} {:s} [-{}] {}".format(
            "oledlife",
                mode,
                "".join([s[0] if s else "" for (s,_,_,_,_,_) in flags]),
                "".join(    p if not s and not l else "" for (s,l,p,_,_,_) in flags),
            )
        )
        log("")
        
        log("## Mode Flags")
        f = None
        for (s,l,p,d,h,_) in flags:
            if s or l:
                log("  {:3} {:16}    {}{}".format( "-"+s.rstrip(":")+"," if s else "","--"+l if l else "",h,("" if d in [None,False] else ", default: "+str(d).lower()) ))
        log("")
    

            
        fonts,patterns,styles = [],[], []
        for (_,_,p,_,_,_) in flags:
            if p == "font":
                for f in dotlife.font.FONT:
                    fonts += [f]
            if p == "pattern":
                for p in mode.value.Pattern:
                    patterns += [p]
            if p == "style":
                for p in mode.value.Style:
                    styles += [p]

        if fonts:
            log("## Fonts")
            fnt = ""
            for f in fonts:
                fnt += str(f) + ", "
                if len(fnt) > 40:
                    log("  " + fnt)
                    fnt = ""
            if len(fnt) > 0:
                log("  " + fnt[:-2])
            log("")

        if patterns:
            log("## Patterns")
            pat = ""
            for p in patterns:
                pat += str(p) + ", "
                if len(pat) > 40:
                    log("  " + pat)
                    pat = ""
            if len(pat)>0:
                log("  " + pat[:-2])
            log("")

        if styles:
            log("## Styles")
            stl = ""
            for p in styles:
                stl += str(p) + ", "
                if len(stl) > 40:
                    log("  " + stl)
                    stl = ""
            if len(stl)>0:
                log("  " + stl[:-2])
            log("")
        

        args = None
        for (s,l,p,d,h,_) in flags:
            if not s and not l:
                args = "  {:20}    {}{}".format( p,h,("" if d in [None,False] else ", default: "+str(d).lower()) )
        if args:
            log("## Arguments")
            log(args)
            log("")
        
    exit(-1)

    
## UTILITY #####################################################################

#REM, raspbian utf8 trouble: https://unix.stackexchange.com/questions/347914/how-to-set-lc-all-en-gb-utf-8-in-raspbian



def about():
    sys.stderr.write("""\
oledlife {}
Â©2020 FEEDFACE.COM
""".format(VERSION) )
    exit(0)
    
    
    
## MAIN ########################################################################


if __name__ == "__main__":

    verbosity = logging.WARNING
    logger = logging.getLogger(NAME)
    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(message)s")
    handler.setFormatter(formatter)
    handler.setLevel(verbosity)
    logger.setLevel(verbosity)
    logger.addHandler(handler)
    
    
    
    ## read global flags
    short = "".join( [s for (s,_,_,_,_,_) in FLAGS+HELPFLAGS if s is not None] )
    long = [l for (_,l,_,_,_,_) in FLAGS+HELPFLAGS if l is not None] 
    params = dict( [(n,d) for (_,_,n,d,_,_) in FLAGS if n is not None] )
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],short,long)
    except getopt.GetoptError as x:
        usage(None,"{}".format(x))
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-V", "--version"):
            about()
        elif opt in ("-v", "--verbose"):
            verbosity -= 10
            logger.setLevel(verbosity)
            handler.setLevel(verbosity)
        elif opt in ("-q", "--quiet"):
            verbosity = logging.ERROR
            logger.setLevel(verbosity)
            handler.setLevel(verbosity)
        else:
            for (s,l,p,_,h,f) in FLAGS:
                if s is None and l is None:
                    continue
                if opt in ["-"+s.rstrip(":"),"--"+l.rstrip("=")]:
                    fun = f if f else lambda x: x
                    if s.endswith(":") or l.endswith("="):
                        try:
                            params[p] = fun(arg)
                        except Exception as x:
                            usage(None,"invalid argument: {} {}".format(opt,arg))
                    else:
                        params[p] ^= True
                    break
            else:
                usage(None,"internal error: option {} not implemented.".format(opt))

    for (s,l,n,_,_,_) in FLAGS:
        if n and params[n] is None:
            usage(None,"mandatory parameter {}/{} missing.".format("-"+s.rstrip(":") if s else "","--"+l.rstrip("=") if l else ""))

    ## read mode
    runmode = DEFAULT_MODE
    if len(args) >= 1:
        try:
            runmode = MODE[ args[0] ]
            args = args[1:]
        except KeyError:
            usage(None,"invalid mode: {:s}".format(args[0]))



    ## read mode flags
    modeflags = HELPFLAGS + oledlife.mode.Mode.FLAGS + runmode.value.flags
    short = "".join( [s for (s,_,_,_,_,_) in modeflags if s is not None] )
    long = [l for (_,l,_,_,_,_) in modeflags if l is not None] 
    modeparams = dict( [(n,d) for (_,_,n,d,_,_) in modeflags if n is not None] )
    

    try:
        opts, args = getopt.getopt(args,short,long)
    except getopt.GetoptError as x:
        usage(runmode,str(x))
    

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage(runmode)
        else:
            for (s,l,p,_,h,f) in modeflags:
                if opt in ["-"+s.rstrip(":"),"--"+l.rstrip("=")]:
                    fun = f if f else lambda x: x
                    if s.endswith(":") or l.endswith("="):
                        try:
                            modeparams[p] = fun(arg)
                        except Exception as x:
                            usage(runmode,"invalid argument: {} {}".format(opt,arg))
                    else:
                        modeparams[p] = True
                    break
            else:
                usage(runmode,"internal error: option {} not implemented.".format(opt))            


    ## read remainder into no-flags mode param    
    for (s,l,p,_,_,_) in modeflags:
        if not s and not l:
            modeparams[p] = " ".join(args)
        

#    dump(params)
    exit( main(runmode,**params,**modeparams) )
